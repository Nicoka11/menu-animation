{"id":"node_modules/l/src/utilities.js","dependencies":[{"name":"G:\\Z - Web Training\\menu-animation\\package.json","includedInParent":true,"mtime":1619633306767},{"name":"G:\\Z - Web Training\\menu-animation\\node_modules\\l\\package.json","includedInParent":true,"mtime":1619633300165},{"name":"stream","loc":{"line":2,"column":23},"parent":"G:\\Z - Web Training\\menu-animation\\node_modules\\l\\src\\utilities.js","resolved":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\stream-browserify\\index.js"},{"name":"buffer","parent":"G:\\Z - Web Training\\menu-animation\\node_modules\\l\\src\\utilities.js","resolved":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\nconst stream = require('stream')\n\nvar utilities = {}\n\nutilities.bufferStream = function (stream) {\n  return new Promise(function (resolve, reject) {\n    var buf\n    stream.on('data', function (data) {\n      if (!buf) {\n        buf = Buffer.from(data)\n      } else {\n        buf = Buffer.concat([buf, data])\n      }\n    })\n    stream.on('end', function () {\n      resolve(buf)\n    })\n    stream.on('error', reject)\n  })\n}\nutilities.bufferIfStream = function (r) {\n  if (r instanceof stream.Readable) {\n    return utilities.bufferStream(r)\n  }\n  return r\n}\nutilities.segmentType = function (segment) {\n  if (segment.$type) return segment.$type\n  // TODO infer from function name(){}\n  for (var type of ['stream', 'sync', 'async', 'promise']) {\n    if (typeof segment[type] !== 'undefined') return type\n  }\n  return 'auto'\n}\nutilities.expandSegment = function (segment) {\n  if (typeof segment === 'function') {\n    segment = {\n      $func: segment\n    }\n  } else if (utilities.isPromise(segment)) {\n    segment = {\n      promise: segment\n    }\n  } else if (segment.func) {\n    segment.$func = segment.func\n    delete segment.func\n  }\n\n  segment.$type = utilities.segmentType(segment)\n  if (!segment.$func) {\n    segment.$func = segment[segment.$type]\n    delete segment[segment.$type]\n  }\n\n  var keys = Object.keys(segment).filter((k) => k[0] !== '$')\n  if (keys.length > 0) {\n    segment.$type = 'split'\n    for (var key of keys) {\n      segment[key] = utilities.expandSegment(segment[key])\n    }\n  }\n\n  return segment\n}\nutilities.isPromise = function (obj) {\n  return obj && typeof obj.then === 'function'\n}\nmodule.exports = utilities\n"},"sourceMaps":null,"error":null,"hash":"f9590bb642527d264d2ca02398cc976d","cacheData":{"env":{}}}