{"id":"C:/Users/nicok/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/browserify-aes/modes/ctr.js","dependencies":[{"name":"G:\\Z - Web Training\\menu-animation\\package.json","includedInParent":true,"mtime":1619633306767},{"name":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\browserify-aes\\package.json","includedInParent":true,"mtime":1610635478113},{"name":"buffer-xor","loc":{"line":1,"column":18},"parent":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\buffer-xor\\index.js"},{"name":"safe-buffer","loc":{"line":2,"column":21},"parent":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\safe-buffer\\index.js"},{"name":"../incr32","loc":{"line":3,"column":21},"parent":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\browserify-aes\\modes\\ctr.js","resolved":"C:\\Users\\nicok\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\browserify-aes\\incr32.js"}],"generated":{"js":"\nvar xor = require('buffer-xor')\nvar Buffer = require('safe-buffer').Buffer\nvar incr32 = require('../incr32')\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlockRaw(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nvar blockSize = 16\nexports.encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / blockSize)\n  var start = self._cache.length\n  self._cache = Buffer.concat([\n    self._cache,\n    Buffer.allocUnsafe(chunkNum * blockSize)\n  ])\n  for (var i = 0; i < chunkNum; i++) {\n    var out = getBlock(self)\n    var offset = start + i * blockSize\n    self._cache.writeUInt32BE(out[0], offset + 0)\n    self._cache.writeUInt32BE(out[1], offset + 4)\n    self._cache.writeUInt32BE(out[2], offset + 8)\n    self._cache.writeUInt32BE(out[3], offset + 12)\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n"},"sourceMaps":null,"error":null,"hash":"6cdbecfcc6b44d430e6a33e0fd818ff1","cacheData":{"env":{}}}