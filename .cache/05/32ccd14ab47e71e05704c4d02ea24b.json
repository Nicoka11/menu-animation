{"id":"node_modules/splitting/dist/splitting.js","dependencies":[{"name":"G:\\Z - Web Training\\menu-animation\\package.json","includedInParent":true,"mtime":1625922480493},{"name":"G:\\Z - Web Training\\menu-animation\\node_modules\\splitting\\package.json","includedInParent":true,"mtime":1619805726053}],"generated":{"js":"var define;\nvar global = arguments[3];\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n\ttypeof define === 'function' && define.amd ? define(factory) :\r\n\t(global.Splitting = factory());\r\n}(this, (function () { 'use strict';\r\n\r\nvar root = document;\r\nvar createText = root.createTextNode.bind(root);\r\n\r\n/**\r\n * # setProperty\r\n * Apply a CSS var\r\n * @param el{HTMLElement} \r\n * @param varName {string} \r\n * @param value {string|number}  \r\n */\r\nfunction setProperty(el, varName, value) {\r\n    el.style.setProperty(varName, value);\r\n} \r\n\r\n/**\r\n * \r\n * @param {Node} el \r\n * @param {Node} child \r\n */\r\nfunction appendChild(el, child) {\r\n  return el.appendChild(child);\r\n}\r\n\r\nfunction createElement(parent, key, text, whitespace) {\r\n  var el = root.createElement('span');\r\n  key && (el.className = key); \r\n  if (text) { \r\n      !whitespace && el.setAttribute(\"data-\" + key, text);\r\n      el.textContent = text; \r\n  }\r\n  return (parent && appendChild(parent, el)) || el;\r\n}\r\n\r\nfunction getData(el, key) {\r\n  return el.getAttribute(\"data-\" + key)\r\n}\r\n\r\n/**\r\n * \r\n * @param e {import('../types').Target} \r\n * @param parent {HTMLElement}\r\n * @returns {HTMLElement[]}\r\n */\r\nfunction $(e, parent) {\r\n    return !e || e.length == 0\r\n        ? // null or empty string returns empty array\r\n          []\r\n        : e.nodeName\r\n            ? // a single element is wrapped in an array\r\n              [e]\r\n            : // selector and NodeList are converted to Element[]\r\n              [].slice.call(e[0].nodeName ? e : (parent || root).querySelectorAll(e));\r\n}\r\n\r\n/**\r\n * Creates and fills an array with the value provided\r\n * @template {T}\r\n * @param {number} len\r\n * @param {() => T} valueProvider\r\n * @return {T}\r\n */\r\nfunction Array2D(len) {\r\n    var a = [];\r\n    for (; len--; ) {\r\n        a[len] = [];\r\n    }\r\n    return a;\r\n}\r\n\r\nfunction each(items, fn) {\r\n    items && items.some(fn);\r\n}\r\n\r\nfunction selectFrom(obj) {\r\n    return function (key) {\r\n        return obj[key];\r\n    }\r\n}\r\n\r\n/**\r\n * # Splitting.index\r\n * Index split elements and add them to a Splitting instance.\r\n *\r\n * @param element {HTMLElement}\r\n * @param key {string}\r\n * @param items {HTMLElement[] | HTMLElement[][]}\r\n */\r\nfunction index(element, key, items) {\r\n    var prefix = '--' + key;\r\n    var cssVar = prefix + \"-index\";\r\n\r\n    each(items, function (items, i) {\r\n        if (Array.isArray(items)) {\r\n            each(items, function(item) {\r\n                setProperty(item, cssVar, i);\r\n            });\r\n        } else {\r\n            setProperty(items, cssVar, i);\r\n        }\r\n    });\r\n\r\n    setProperty(element, prefix + \"-total\", items.length);\r\n}\r\n\r\n/**\r\n * @type {Record<string, import('./types').ISplittingPlugin>}\r\n */\r\nvar plugins = {};\r\n\r\n/**\r\n * @param by {string}\r\n * @param parent {string}\r\n * @param deps {string[]}\r\n * @return {string[]}\r\n */\r\nfunction resolvePlugins(by, parent, deps) {\r\n    // skip if already visited this dependency\r\n    var index = deps.indexOf(by);\r\n    if (index == -1) {\r\n        // if new to dependency array, add to the beginning\r\n        deps.unshift(by);\r\n\r\n        // recursively call this function for all dependencies\r\n        each(plugins[by].depends, function(p) {\r\n            resolvePlugins(p, by, deps);\r\n        });\r\n    } else {\r\n        // if this dependency was added already move to the left of\r\n        // the parent dependency so it gets loaded in order\r\n        var indexOfParent = deps.indexOf(parent);\r\n        deps.splice(index, 1);\r\n        deps.splice(indexOfParent, 0, by);\r\n    }\r\n    return deps;\r\n}\r\n\r\n/**\r\n * Internal utility for creating plugins... essentially to reduce\r\n * the size of the library\r\n * @param {string} by \r\n * @param {string} key \r\n * @param {string[]} depends \r\n * @param {Function} split \r\n * @returns {import('./types').ISplittingPlugin}\r\n */\r\nfunction createPlugin(by, depends, key, split) {\r\n    return {\r\n        by: by,\r\n        depends: depends,\r\n        key: key,\r\n        split: split\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param by {string}\r\n * @returns {import('./types').ISplittingPlugin[]}\r\n */\r\nfunction resolve(by) {\r\n    return resolvePlugins(by, 0, []).map(selectFrom(plugins));\r\n}\r\n\r\n/**\r\n * Adds a new plugin to splitting\r\n * @param opts {import('./types').ISplittingPlugin}\r\n */\r\nfunction add(opts) {\r\n    plugins[opts.by] = opts;\r\n}\r\n\r\n/**\r\n * # Splitting.split\r\n * Split an element's textContent into individual elements\r\n * @param el {Node} Element to split\r\n * @param key {string}\r\n * @param splitOn {string}\r\n * @param includeSpace {boolean}\r\n * @returns {HTMLElement[]}\r\n */\r\nfunction splitText(el, key, splitOn, includePrevious, preserveWhitespace) {\r\n    // Combine any strange text nodes or empty whitespace.\r\n    el.normalize();\r\n\r\n    // Use fragment to prevent unnecessary DOM thrashing.\r\n    var elements = [];\r\n    var F = document.createDocumentFragment();\r\n\r\n    if (includePrevious) {\r\n        elements.push(el.previousSibling);\r\n    }\r\n\r\n    var allElements = [];\r\n    $(el.childNodes).some(function(next) {\r\n        if (next.tagName && !next.hasChildNodes()) {\r\n            // keep elements without child nodes (no text and no children)\r\n            allElements.push(next);\r\n            return;\r\n        }\r\n        // Recursively run through child nodes\r\n        if (next.childNodes && next.childNodes.length) {\r\n            allElements.push(next);\r\n            elements.push.apply(elements, splitText(next, key, splitOn, includePrevious, preserveWhitespace));\r\n            return;\r\n        }\r\n\r\n        // Get the text to split, trimming out the whitespace\r\n        /** @type {string} */\r\n        var wholeText = next.wholeText || '';\r\n        var contents = wholeText.trim();\r\n\r\n        // If there's no text left after trimming whitespace, continue the loop\r\n        if (contents.length) {\r\n            // insert leading space if there was one\r\n            if (wholeText[0] === ' ') {\r\n                allElements.push(createText(' '));\r\n            }\r\n            // Concatenate the split text children back into the full array\r\n            each(contents.split(splitOn), function(splitText, i) {\r\n                if (i && preserveWhitespace) {\r\n                    allElements.push(createElement(F, \"whitespace\", \" \", preserveWhitespace));\r\n                }\r\n                var splitEl = createElement(F, key, splitText);\r\n                elements.push(splitEl);\r\n                allElements.push(splitEl);\r\n            }); \r\n            // insert trailing space if there was one\r\n            if (wholeText[wholeText.length - 1] === ' ') {\r\n                allElements.push(createText(' '));\r\n            }\r\n        }\r\n    });\r\n\r\n    each(allElements, function(el) {\r\n        appendChild(F, el);\r\n    });\r\n\r\n    // Clear out the existing element\r\n    el.innerHTML = \"\";\r\n    appendChild(el, F);\r\n    return elements;\r\n}\r\n\r\n/** an empty value */\r\nvar _ = 0;\r\n\r\nfunction copy(dest, src) {\r\n    for (var k in src) {\r\n        dest[k] = src[k];\r\n    }\r\n    return dest;\r\n}\r\n\r\nvar WORDS = 'words';\r\n\r\nvar wordPlugin = createPlugin(\r\n    /*by: */ WORDS,\r\n    /*depends: */ _,\r\n    /*key: */ 'word', \r\n    /*split: */ function(el) {\r\n        return splitText(el, 'word', /\\s+/, 0, 1)\r\n    }\r\n);\r\n\r\nvar CHARS = \"chars\";\r\n\r\nvar charPlugin = createPlugin(\r\n    /*by: */ CHARS,\r\n    /*depends: */ [WORDS],\r\n    /*key: */ \"char\", \r\n    /*split: */ function(el, options, ctx) {\r\n        var results = [];\r\n\r\n        each(ctx[WORDS], function(word, i) {\r\n            results.push.apply(results, splitText(word, \"char\", \"\", options.whitespace && i));\r\n        });\r\n\r\n        return results;\r\n    }\r\n);\r\n\r\n/**\r\n * # Splitting\r\n * \r\n * @param opts {import('./types').ISplittingOptions} \r\n */\r\nfunction Splitting (opts) {\r\n  opts = opts || {};\r\n  var key = opts.key;\r\n\r\n  return $(opts.target || '[data-splitting]').map(function(el) {\r\n    var ctx = el['üçå'];  \r\n    if (!opts.force && ctx) {\r\n      return ctx;\r\n    }\r\n\r\n    ctx = el['üçå'] = { el: el };\r\n    var items = resolve(opts.by || getData(el, 'splitting') || CHARS);\r\n    var opts2 = copy({}, opts);\r\n    each(items, function(plugin) {\r\n      if (plugin.split) {\r\n        var pluginBy = plugin.by;\r\n        var key2 = (key ? '-' + key : '') + plugin.key;\r\n        var results = plugin.split(el, opts2, ctx);\r\n        key2 && index(el, key2, results);\r\n        ctx[pluginBy] = results;\r\n        el.classList.add(pluginBy);\r\n      } \r\n    });\r\n\r\n    el.classList.add('splitting');\r\n    return ctx;\r\n  })\r\n}\r\n\r\n/**\r\n * # Splitting.html\r\n * \r\n * @param opts {import('./types').ISplittingOptions}\r\n */\r\nfunction html(opts) {\r\n  opts = opts || {};\r\n  var parent = opts.target =  createElement();\r\n  parent.innerHTML = opts.content;\r\n  Splitting(opts);\r\n  return parent.outerHTML\r\n}\r\n\r\nSplitting.html = html;\r\nSplitting.add = add;\r\n\r\nfunction detectGrid(el, options, side) {\r\n    var items = $(options.matching || el.children, el);\r\n    var c = {};\r\n\r\n    each(items, function(w) {\r\n        var val = Math.round(w[side]);\r\n        (c[val] || (c[val] = [])).push(w);\r\n    });\r\n\r\n    return Object.keys(c).map(Number).sort(byNumber).map(selectFrom(c));\r\n}\r\n\r\nfunction byNumber(a, b) {\r\n    return a - b;\r\n}\r\n\r\nvar linePlugin = createPlugin(\r\n    /*by: */ 'lines',\r\n    /*depends: */ [WORDS],\r\n    /*key: */ 'line',\r\n    /*split: */ function(el, options, ctx) {\r\n      return detectGrid(el, { matching: ctx[WORDS] }, 'offsetTop')\r\n    }\r\n);\r\n\r\nvar itemPlugin = createPlugin(\r\n    /*by: */ 'items',\r\n    /*depends: */ _,\r\n    /*key: */ 'item', \r\n    /*split: */ function(el, options) {\r\n        return $(options.matching || el.children, el)\r\n    }\r\n);\r\n\r\nvar rowPlugin = createPlugin(\r\n    /*by: */ 'rows',\r\n    /*depends: */ _,\r\n    /*key: */ 'row', \r\n    /*split: */ function(el, options) {\r\n        return detectGrid(el, options, \"offsetTop\");\r\n    }\r\n);\r\n\r\nvar columnPlugin = createPlugin(\r\n    /*by: */ 'cols',\r\n    /*depends: */ _,\r\n    /*key: */ \"col\", \r\n    /*split: */ function(el, options) {\r\n        return detectGrid(el, options, \"offsetLeft\");\r\n    }\r\n);\r\n\r\nvar gridPlugin = createPlugin(\r\n    /*by: */ 'grid',\r\n    /*depends: */ ['rows', 'cols']\r\n);\r\n\r\nvar LAYOUT = \"layout\";\r\n\r\nvar layoutPlugin = createPlugin(\r\n    /*by: */ LAYOUT,\r\n    /*depends: */ _,\r\n    /*key: */ _,\r\n    /*split: */ function(el, opts) {\r\n        // detect and set options\r\n        var rows =  opts.rows = +(opts.rows || getData(el, 'rows') || 1);\r\n        var columns = opts.columns = +(opts.columns || getData(el, 'columns') || 1);\r\n\r\n        // Seek out the first <img> if the value is true \r\n        opts.image = opts.image || getData(el, 'image') || el.currentSrc || el.src;\r\n        if (opts.image) {\r\n            var img = $(\"img\", el)[0];\r\n            opts.image = img && (img.currentSrc || img.src);\r\n        }\r\n\r\n        // add optional image to background\r\n        if (opts.image) {\r\n            setProperty(el, \"background-image\", \"url(\" + opts.image + \")\");\r\n        }\r\n\r\n        var totalCells = rows * columns;\r\n        var elements = [];\r\n\r\n        var container = createElement(_, \"cell-grid\");\r\n        while (totalCells--) {\r\n            // Create a span\r\n            var cell = createElement(container, \"cell\");\r\n            createElement(cell, \"cell-inner\");\r\n            elements.push(cell);\r\n        }\r\n\r\n        // Append elements back into the parent\r\n        appendChild(el, container);\r\n\r\n        return elements;\r\n    }\r\n);\r\n\r\nvar cellRowPlugin = createPlugin(\r\n    /*by: */ \"cellRows\",\r\n    /*depends: */ [LAYOUT],\r\n    /*key: */ \"row\",\r\n    /*split: */ function(el, opts, ctx) {\r\n        var rowCount = opts.rows;\r\n        var result = Array2D(rowCount);\r\n\r\n        each(ctx[LAYOUT], function(cell, i, src) {\r\n            result[Math.floor(i / (src.length / rowCount))].push(cell);\r\n        });\r\n\r\n        return result;\r\n    }\r\n);\r\n\r\nvar cellColumnPlugin = createPlugin(\r\n    /*by: */ \"cellColumns\",\r\n    /*depends: */ [LAYOUT],\r\n    /*key: */ \"col\",\r\n    /*split: */ function(el, opts, ctx) {\r\n        var columnCount = opts.columns;\r\n        var result = Array2D(columnCount);\r\n\r\n        each(ctx[LAYOUT], function(cell, i) {\r\n            result[i % columnCount].push(cell);\r\n        });\r\n\r\n        return result;\r\n    }\r\n);\r\n\r\nvar cellPlugin = createPlugin(\r\n    /*by: */ \"cells\",\r\n    /*depends: */ ['cellRows', 'cellColumns'],\r\n    /*key: */ \"cell\", \r\n    /*split: */ function(el, opt, ctx) { \r\n        // re-index the layout as the cells\r\n        return ctx[LAYOUT];\r\n    }\r\n);\r\n\r\n// install plugins\r\n// word/char plugins\r\nadd(wordPlugin);\r\nadd(charPlugin);\r\nadd(linePlugin);\r\n// grid plugins\r\nadd(itemPlugin);\r\nadd(rowPlugin);\r\nadd(columnPlugin);\r\nadd(gridPlugin);\r\n// cell-layout plugins\r\nadd(layoutPlugin);\r\nadd(cellRowPlugin);\r\nadd(cellColumnPlugin);\r\nadd(cellPlugin);\r\n\r\nreturn Splitting;\r\n\r\n})));\r\n"},"sourceMaps":null,"error":null,"hash":"fa878bddf620e53c45129961e202da4d","cacheData":{"env":{}}}