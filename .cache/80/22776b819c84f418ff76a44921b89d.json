{"id":"src/CustomCursor.js","dependencies":[{"name":"G:\\Z - Web Training\\menu-animation\\package.json","includedInParent":true,"mtime":1619805726056},{"name":"gsap","loc":{"line":1,"column":17},"parent":"G:\\Z - Web Training\\menu-animation\\src\\CustomCursor.js","resolved":"G:\\Z - Web Training\\menu-animation\\node_modules\\gsap\\index.js"},{"name":"paper","loc":{"line":2,"column":18},"parent":"G:\\Z - Web Training\\menu-animation\\src\\CustomCursor.js","resolved":"G:\\Z - Web Training\\menu-animation\\node_modules\\paper\\dist\\paper-full.js"},{"name":"./Utils.js","loc":{"line":3,"column":18},"parent":"G:\\Z - Web Training\\menu-animation\\src\\CustomCursor.js","resolved":"G:\\Z - Web Training\\menu-animation\\src\\Utils.js"}],"generated":{"js":"\"use strict\";\n\nvar _gsap = _interopRequireDefault(require(\"gsap\"));\n\nvar _paper = _interopRequireDefault(require(\"paper\"));\n\nvar _Utils = _interopRequireDefault(require(\"./Utils.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Small Cursor\nvar clientX = -100;\nvar clientY = -100;\nvar innerCursor = document.querySelector(\".cursor--small\");\n\nvar initCursor = function initCursor() {\n  document.addEventListener(\"mousemove\", function (e) {\n    clientX = e.clientX;\n    clientY = e.clientY;\n  });\n\n  var render = function render() {\n    _gsap.default.set(innerCursor, {\n      x: clientX,\n      y: clientY\n    });\n\n    requestAnimationFrame(render);\n  };\n\n  requestAnimationFrame(render);\n};\n\ninitCursor(); // Cursor Circle\n\nvar lastX = 0;\nvar lastY = 0;\nvar isStuck = false;\nvar group, stuckX, stuckY;\nvar currentTarget;\n\nvar initCanvas = function initCanvas() {\n  var canvas = document.querySelector(\".cursor--canvas\");\n  var shapeBounds = {\n    width: 75,\n    height: 75\n  };\n\n  _paper.default.setup(canvas);\n\n  var strokeColor = \"hsl(274Â°, 23%, 67%, 0.5)\";\n  var strokeWidth = 2;\n  var segments = 8;\n  var radius = 15;\n  var polygon = new _paper.default.Path.RegularPolygon(new _paper.default.Point(0, 0), segments, radius);\n  polygon.strokeColor = strokeColor;\n  polygon.strokeWidth = strokeWidth;\n  polygon.smooth();\n  group = new _paper.default.Group([polygon]);\n  group.applyMatrix = false;\n\n  _paper.default.view.onFrame = function () {\n    // For button\n    if (!isStuck) {\n      lastX = _Utils.default.lerp(lastX, clientX, 0.1);\n      lastY = _Utils.default.lerp(lastY, clientY, 0.1);\n      group.position = new _paper.default.Point(lastX, lastY);\n    } else if (isStuck) {\n      lastX = _Utils.default.lerp(lastX, stuckX, 0.2);\n      lastY = _Utils.default.lerp(lastY, stuckY, 0.2);\n      group.position = new _paper.default.Point(lastX, lastY);\n    }\n\n    if (isStuck && polygon.bounds.width < shapeBounds.width && currentTarget.classList.contains(\"nav__link\")) {\n      polygon.scale(5);\n      polygon.strokeWidth = strokeWidth * 2;\n    } else if (isStuck && polygon.bounds.width < shapeBounds.width && currentTarget.classList.contains(\"nav__button\")) {\n      polygon.scale(1.1);\n    } else if (!isStuck && polygon.bounds.width > radius * 2) {\n      polygon.scale(0.9);\n      polygon.strokeWidth = strokeWidth;\n    } // For nav list\n\n\n    if (!isStuck) {\n      lastX = _Utils.default.lerp(lastX, clientX, 0.1);\n      lastY = _Utils.default.lerp(lastY, clientY, 0.1);\n      group.position = new _paper.default.Point(lastX, lastY);\n    }\n  };\n};\n\ninitCanvas();\n\nfunction initHovers() {\n  var handlerMouseEnter = function handlerMouseEnter(e) {\n    currentTarget = e.target;\n    var navItem = e.currentTarget;\n    var navItemBox = navItem.getBoundingClientRect();\n\n    if (currentTarget.classList.contains(\"nav__link\")) {\n      stuckX = Math.round(navItemBox.left);\n      stuckY = Math.round(navItemBox.top + navItemBox.height / 2);\n    } else {\n      stuckX = Math.round(navItemBox.left + navItemBox.width / 2);\n      stuckY = Math.round(navItemBox.top + navItemBox.height / 2);\n    }\n\n    isStuck = true;\n  };\n\n  var handlerMouseLeave = function handlerMouseLeave() {\n    isStuck = false;\n  };\n\n  var linkItems = document.querySelectorAll(\".nav__button\");\n  linkItems.forEach(function (item) {\n    item.addEventListener(\"mouseenter\", handlerMouseEnter);\n    item.addEventListener(\"mouseleave\", handlerMouseLeave);\n  });\n  var navLinks = document.querySelectorAll(\".nav__link\");\n  navLinks.forEach(function (item) {\n    item.addEventListener(\"mouseenter\", handlerMouseEnter);\n    item.addEventListener(\"mouseleave\", handlerMouseLeave);\n  });\n}\n\ninitHovers();"},"sourceMaps":null,"error":null,"hash":"314b0ddc7a53663d1284593e22eb83a3","cacheData":{"env":{}}}